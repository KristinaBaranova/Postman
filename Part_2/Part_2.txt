PART_2 Postman


http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
		pm.test("Status code is 200", function () {
		    pm.response.to.have.status(200);
		});

3. Проверить, что в body приходит правильный string.
		pm.test("Body is correct", function () {
			pm.response.to.have.body("This is the first responce from server!ss");
		});
		
http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
		pm.test("Status code is 200", function () {
			pm.response.to.have.status(200);
		});

3. Спарсить response body в json.
		let respData = pm.response.json();
		console.log(respData)

4. Проверить, что name в ответе равно name s request (name вбить руками.)
		pm.test("Check name", function () {
			pm.expect(respData.name).to.eql("Kris");
		});

5. Проверить, что age в ответе равно age s request (age вбить руками.)
		pm.test("Check age", function () {
			pm.expect(+respData.age).to.eql(31);
		});
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
		pm.test("Check salary", function () {
			pm.expect(+respData.salary).to.eql(1500);
		});

7. Спарсить request.
		let reqData = request.data
		console.log(reqData)

8. Проверить, что name в ответе равно name в request (name забрать из request.)
		pm.test("Check name2", function () {
			pm.expect(respData.name).to.eql(reqData.name);
		});


9. Проверить, что age в ответе равно age в request (age забрать из request.)
		pm.test("Check age2", function () {
			pm.expect(respData.age).to.eql(reqData.age);
		});

10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)
		pm.test("Check salary2", function () {
			pm.expect(+respData.salary).to.eql(+reqData.salary);
		});

		console.log(respData.salary)
		console.log(reqData.salary)

11. Вывести в консоль параметр family из response.
		console.log(respData.family)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
		let respUsalary = respData.family.u_salary_1_5_year
		console.log(respUsalary)

		pm.test("Check u_salary_1_5_year", function () {
			pm.expect(respUsalary).to.eql(reqData.salary*4);
		});


http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
// 2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.

let respData = pm.response.json()
console.log(respData)

// 4. Спарсить request.
let reqQuery = pm.request.url.query.toObject()
console.log(reqQuery)

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Check name", function () {
    pm.expect(respData.name).to.eql(reqQuery.name);
});

// 6. Проверить, что age в ответе равно age s request (age забрать из request.)

pm.test("Check age", function () {
    pm.expect(respData.age).to.eql(reqQuery.age);
});

// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test("Check salary", function () {
    pm.expect(respData.salary).to.eql(+reqQuery.salary);
});

// 8. Вывести в консоль параметр family из response.

console.log(respData.family)

// 9. Проверить, что у параметра dog есть параметры name.

let dogParam = respData.family.pets.dog
console.log(dogParam)

pm.test("Check param dog has param name", function () {
    pm.expect(dogParam).to.have.property("name");
});

// 10. Проверить, что у параметра dog есть параметры age.


pm.test("Check param dog has param age", function () {
    pm.expect(dogParam).to.have.property("age");
});
// 11. Проверить, что параметр name имеет значение Luky.

pm.test("Check param name has value Luky", function () {
    pm.expect(dogParam.name).to.eql("Luky");
});
// 12. Проверить, что параметр age имеет значение 4.

pm.test("Check param age has value 4", function () {
    pm.expect(dogParam.age).to.eql(4);
});


============================================================================
http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
// 2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.

let respData = pm.response.json()
console.log(respData) 

// 4. Спарсить request.

let reqQuery = pm.request.url.query.toObject()
console.log(reqQuery)

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Check name", function () {
    pm.expect(respData.name).to.eql(reqQuery.name);
});

// 6. Проверить, что age в ответе равно age из request (age забрать из request.)

pm.test("Check age", function () {
    pm.expect(respData.age).to.eql(+reqQuery.age);
});

// 7. Вывести в консоль параметр salary из request.

console.log(reqQuery.salary)

// 8. Вывести в консоль параметр salary из response.

console.log(respData.salary)

// 9. Вывести в консоль 0-й элемент параметра salary из response.

console.log(respData.salary[0])

// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.

console.log(respData.salary[1])

// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.

console.log(respData.salary[2])

// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)

pm.test("Check salary[0]", function () {
    pm.expect(respData.salary[0]).to.eql(+reqQuery.salary);
});

// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)

pm.test("Check salary[1]", function () {
    pm.expect(+respData.salary[1]).to.eql(+reqQuery.salary*2);
});

// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)

pm.test("Check salary[2]", function () {
    pm.expect(+respData.salary[2]).to.eql(+reqQuery.salary*3);
});

// 15. Создать в окружении переменную name
// 16. Создать в окружении переменную age
// 17. Создать в окружении переменную salary
// 18. Передать в окружение переменную name

pm.environment.set("name", reqQuery.name);

// 19. Передать в окружение переменную age

pm.environment.set("age", reqQuery.age);

// 20. Передать в окружение переменную salary

pm.environment.set("salary", reqQuery.salary);

// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary

respData.salary.forEach(function(salary) {
    console.log(salary);
});


=============================================================================

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
// 5. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 6. Спарсить response body в json.

let respData = pm.response.json();
console.log(respData);

// 7. Спарсить request.

let reqData = request.data;
console.log(reqData);

// 8. Проверить, что json response имеет параметр start_qa_salary

pm.test("Check json response has param start_qa_salary", function () {
    pm.expect(respData).to.have.property("start_qa_salary");
});

// 9. Проверить, что json response имеет параметр qa_salary_after_6_months

pm.test("Check json response has param qa_salary_after_6_months", function () {
    pm.expect(respData).to.have.property("qa_salary_after_6_months");
});

// 10. Проверить, что json response имеет параметр qa_salary_after_12_months

pm.test("Check json response has param qa_salary_after_12_months", function () {
    pm.expect(respData).to.have.property("qa_salary_after_12_months");
});

// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year

pm.test("Check json response has param qa_salary_after_1.5_year", function () {
    pm.expect(respData).to.have.property("qa_salary_after_1.5_year");
});

// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years

pm.test("Check json response has param qa_salary_after_3.5_years", function () {
    pm.expect(respData).to.have.property("qa_salary_after_3.5_years");
});

// 13. Проверить, что json response имеет параметр person

pm.test("Check json response has param person", function () {
    pm.expect(respData).to.have.property("person");
});

// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)

pm.test("параметр start_qa_salary равен salary из request", function () {
    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary);
});

// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)

pm.test("Параметр qa_salary_after_6_months равен salary*2", function () {
    pm.expect(respData.qa_salary_after_6_months).to.eql(+reqData.salary*2);
});

// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)

pm.test("Параметр qa_salary_after_12_months равен salary*2.7", function () {
    pm.expect(respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);
});

// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)

pm.test("Параметр qa_salary_after_1.5_year равен salary*3.3", function () {
    pm.expect(respData["qa_salary_after_1.5_year"]).to.eql(+reqData.salary*3.3);
});

// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)

pm.test("Параметр qa_salary_after_3.5_year равен salary*3.5", function () {
    pm.expect(respData["qa_salary_after_3.5_years"]).to.eql(+reqData.salary*3.8);
});

// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)

pm.test("В параметре person, 1-й элемент из u_name равен salary из request", function () {
    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary);
});

// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)

pm.test("Параметр u_age равен age из request", function () {
    pm.expect(respData.person.u_age).to.eql(+reqData.age);
});

// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)

pm.test("Параметр u_salary_5_years равен salary*4.2 из request", function () {
    pm.expect(respData.person["u_salary_5_years"]).to.eql(+reqData.salary*4.2);
});

// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

var responseData = {
    "person": {
        "u_age": 31,
        "u_name": [
            "Kris",
            2000,
            31
        ],
        "u_salary_5_years": 8400.0
    },
    "qa_salary_after_1.5_year": 6600.0,
    "qa_salary_after_12_months": 5400.0,
    "qa_salary_after_3.5_years": 7600.0,
    "qa_salary_after_6_months": 4000,
    "start_qa_salary": 2000
};

// Проверяем, что person есть в ответе и это объект
if (responseData.person && typeof responseData.person === "object") {
    var personData = responseData.person;
    
    // Проверяем, что u_name есть в объекте person и это массив
    if (personData.u_name && Array.isArray(personData.u_name)) {
        var uNameList = personData.u_name;
        
        // Цикл для вывода элементов списка в консоль
        for (var i = 0; i < uNameList.length; i++) {
            console.log(uNameList[i]);
        }
    } else {
        console.log("u_name не является массивом");
    }
} else {
    console.log("person не является объектом или отсутствует в ответе");
}




