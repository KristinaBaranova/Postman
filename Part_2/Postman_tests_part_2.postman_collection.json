{
	"info": {
		"_postman_id": "d712c9d4-7f6e-4b1e-b004-fb35c84812d9",
		"name": "Postman_tests_part_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21130740",
		"_collection_link": "https://lunar-space-575984.postman.co/workspace/Team-Workspace~34bcd725-b32f-4377-89f7-24ff63a1acbf/collection/21130740-d712c9d4-7f6e-4b1e-b004-fb35c84812d9?action=share&source=collection_link&creator=21130740"
	},
	"item": [
		{
			"name": "GET /first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"    let respData = pm.response.json();\r",
							"   console.log(respData)\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(respData.name).to.eql(\"Kris\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(+respData.age).to.eql(31);\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(+respData.salary).to.eql(1500);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data\r",
							"console.log(reqData)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Check name2\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"Check age2\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"pm.test(\"Check salary2\", function () {\r",
							"    pm.expect(+respData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// console.log(respData.salary)\r",
							"// console.log(reqData.salary)\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(respData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let respUsalary = respData.family.u_salary_1_5_year\r",
							"console.log(respUsalary)\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year\", function () {\r",
							"    pm.expect(respUsalary).to.eql(reqData.salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kris",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let respData = pm.response.json()\r",
							"console.log(respData)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let reqQuery = pm.request.url.query.toObject()\r",
							"console.log(reqQuery)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqQuery.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqQuery.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(respData.salary).to.eql(+reqQuery.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(respData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"let dogParam = respData.family.pets.dog\r",
							"console.log(dogParam)\r",
							"\r",
							"pm.test(\"Check param dog has param name\", function () {\r",
							"    pm.expect(dogParam).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"\r",
							"pm.test(\"Check param dog has param age\", function () {\r",
							"    pm.expect(dogParam).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Check param name has value Luky\", function () {\r",
							"    pm.expect(dogParam.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Check param age has value 4\", function () {\r",
							"    pm.expect(dogParam.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Kris&age=31&salary=1500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kris"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let respData = pm.response.json()\r",
							"console.log(respData) \r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let reqQuery = pm.request.url.query.toObject()\r",
							"console.log(reqQuery)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqQuery.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(respData.age).to.eql(+reqQuery.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(reqQuery.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(respData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(respData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(respData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(respData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check salary[0]\", function () {\r",
							"    pm.expect(respData.salary[0]).to.eql(+reqQuery.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check salary[1]\", function () {\r",
							"    pm.expect(+respData.salary[1]).to.eql(+reqQuery.salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check salary[2]\", function () {\r",
							"    pm.expect(+respData.salary[2]).to.eql(+reqQuery.salary*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", reqQuery.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", reqQuery.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", reqQuery.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							"respData.salary.forEach(function(salary) {\r",
							"    console.log(salary);\r",
							"});\r",
							"\r",
							"// console.log(respData.salary[0],[1],[2])\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Kris&age=31&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kris"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 6. Спарсить response body в json.",
							"",
							"let respData = pm.response.json();",
							"console.log(respData);",
							"",
							"// 7. Спарсить request.",
							"",
							"let reqData = request.data;",
							"console.log(reqData);",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"",
							"pm.test(\"Check json response has param start_qa_salary\", function () {",
							"    pm.expect(respData).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"",
							"pm.test(\"Check json response has param qa_salary_after_6_months\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"",
							"pm.test(\"Check json response has param qa_salary_after_12_months\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"",
							"pm.test(\"Check json response has param qa_salary_after_1.5_year\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"",
							"pm.test(\"Check json response has param qa_salary_after_3.5_years\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"",
							"pm.test(\"Check json response has param person\", function () {",
							"    pm.expect(respData).to.have.property(\"person\");",
							"});",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"параметр start_qa_salary равен salary из request\", function () {",
							"    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary);",
							"});",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"Параметр qa_salary_after_6_months равен salary*2\", function () {",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(+reqData.salary*2);",
							"});",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"",
							"pm.test(\"Параметр qa_salary_after_12_months равен salary*2.7\", function () {",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);",
							"});",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"",
							"pm.test(\"Параметр qa_salary_after_1.5_year равен salary*3.3\", function () {",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3);",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"",
							"pm.test(\"Параметр qa_salary_after_3.5_year равен salary*3.5\", function () {",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8);",
							"});",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"В параметре person, 1-й элемент из u_name равен salary из request\", function () {",
							"    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary);",
							"});",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"",
							"pm.test(\"Параметр u_age равен age из request\", function () {",
							"    pm.expect(respData.person.u_age).to.eql(+reqData.age);",
							"});",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"",
							"pm.test(\"Параметр u_salary_5_years равен salary*4.2 из request\", function () {",
							"    pm.expect(respData.person[\"u_salary_5_years\"]).to.eql(+reqData.salary*4.2);",
							"});",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"var responseData = {",
							"    \"person\": {",
							"        \"u_age\": 31,",
							"        \"u_name\": [",
							"            \"Kris\",",
							"            2000,",
							"            31",
							"        ],",
							"        \"u_salary_5_years\": 8400.0",
							"    },",
							"    \"qa_salary_after_1.5_year\": 6600.0,",
							"    \"qa_salary_after_12_months\": 5400.0,",
							"    \"qa_salary_after_3.5_years\": 7600.0,",
							"    \"qa_salary_after_6_months\": 4000,",
							"    \"start_qa_salary\": 2000",
							"};",
							"",
							"// Проверяем, что person есть в ответе и это объект",
							"if (responseData.person && typeof responseData.person === \"object\") {",
							"    var personData = responseData.person;",
							"    ",
							"    // Проверяем, что u_name есть в объекте person и это массив",
							"    if (personData.u_name && Array.isArray(personData.u_name)) {",
							"        var uNameList = personData.u_name;",
							"        ",
							"        // Цикл для вывода элементов списка в консоль",
							"        for (var i = 0; i < uNameList.length; i++) {",
							"            console.log(uNameList[i]);",
							"        }",
							"    } else {",
							"        console.log(\"u_name не является массивом\");",
							"    }",
							"} else {",
							"    console.log(\"person не является объектом или отсутствует в ответе\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// // // 1. Вставить параметр salary из окружения в request\r",
							"// // // Получение значения переменной окружения \"salary\"\r",
							"// let salary = pm.environment.get(\"salary\");\r",
							"// // console.log(salary)\r",
							"// // // Установка значения переменной \"salary\" в формате form-data для запроса\r",
							"// pm.request.body.formdata.add({\r",
							"//     key: \"salary\",\r",
							"//     value: salary\r",
							"// });\r",
							"\r",
							"\r",
							"// // // 2. Вставить параметр age из окружения в age\r",
							"// let salary = pm.environment.get(\"salary\");\r",
							"\r",
							"\r",
							"\r",
							"// // // 3. Вставить параметр name из окружения в name\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}