{
	"info": {
		"_postman_id": "e445227c-db5a-465d-859c-410f490cbf9d",
		"name": "Postman_tests_part_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21130740",
		"_collection_link": "https://lunar-space-575984.postman.co/workspace/Team-Workspace~34bcd725-b32f-4377-89f7-24ff63a1acbf/collection/21130740-e445227c-db5a-465d-859c-410f490cbf9d?action=share&source=collection_link&creator=21130740"
	},
	"item": [
		{
			"name": "POST /login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respData = pm.response.json();\r",
							"console.log(respData.token)\r",
							"\r",
							"pm.collectionVariables.set(\"token\", respData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Terminator",
							"type": "text"
						},
						{
							"key": "password",
							"value": "iwillbeback",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Ajv: Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test('tv4: Schema is valid', function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let reqJSON = JSON.parse(pm.request.body.raw)\r",
							"console.log(reqJSON)\r",
							"pm.test(\"Умножение на коэффициенты\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(reqJSON.salary*1);\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqJSON.salary*2);\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqJSON.salary*2.9);\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(reqJSON.salary*4);\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"\r",
							"pm.collectionVariables.set(\"u_salary_1.5_year\", jsonData.person.u_salary_1_5_year);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": {{age}},\r\n    \"name\": \"{{name}}\",\r\n    \"salary\": {{salary}},\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema =\r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var schema = {\r",
							"    \"items\": {\r",
							"        \"type\": \"boolean\"\r",
							"    }\r",
							"};\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let reqData = request.data\r",
							"pm.test(\"умножение на коэффициенты верное\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(reqData.salary*1);\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(reqData.salary*2);\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(reqData.salary*3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"2-й элемент массива salary больше 1-го и 0-го\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1]).and.to.be.above(jsonData.salary[0]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = \r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let reqData = request.data\r",
							"pm.test(\"Умножение на коэффициенты верное\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(reqData.weight*0.012);\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(reqData.weight*2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "55",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"var schema = \r",
							"{\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"let envName = pm.environment.get(\"name\");\r",
							"console.log(envName)\r",
							"\r",
							"let reqData = request.data\r",
							"\r",
							"pm.test(\"занчение поля name = значению переменной name из окружения\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(envName);\r",
							"    pm.expect(reqData.name).to.eql(envName);\r",
							"});\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"pm.test(\"занчение поля age в ответе соответсвует отправленному в запросе значению поля age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1.5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// // 1) Статус код 200\r",
							"\r",
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"// // 2) Проверка структуры json в ответе.\r",
							"\r",
							"// var schema = \r",
							"// {\r",
							"//   \"type\": \"object\",\r",
							"//   \"properties\": {\r",
							"//     \"age\": {\r",
							"//       \"type\": \"string\"\r",
							"//     },\r",
							"//     \"family\": {\r",
							"//       \"type\": \"object\",\r",
							"//       \"properties\": {\r",
							"//         \"children\": {\r",
							"//           \"type\": \"array\",\r",
							"//           \"items\": [\r",
							"//             {\r",
							"//               \"type\": \"array\",\r",
							"//               \"items\": [\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 },\r",
							"//                 {\r",
							"//                   \"type\": \"integer\"\r",
							"//                 }\r",
							"//               ]\r",
							"//             },\r",
							"//             {\r",
							"//               \"type\": \"array\",\r",
							"//               \"items\": [\r",
							"//                 {\r",
							"//                   \"type\": \"string\"\r",
							"//                 },\r",
							"//                 {\r",
							"//                   \"type\": \"integer\"\r",
							"//                 }\r",
							"//               ]\r",
							"//             }\r",
							"//           ]\r",
							"//         },\r",
							"//         \"u_salary_1_5_year\": {\r",
							"//           \"type\": \"integer\"\r",
							"//         }\r",
							"//       },\r",
							"//       \"required\": [\r",
							"//         \"children\",\r",
							"//         \"u_salary_1_5_year\"\r",
							"//       ]\r",
							"//     },\r",
							"//     \"name\": {\r",
							"//       \"type\": \"string\"\r",
							"//     },\r",
							"//     \"salary\": {\r",
							"//       \"type\": \"integer\"\r",
							"//     }\r",
							"//   },\r",
							"//   \"required\": [\r",
							"//     \"age\",\r",
							"//     \"family\",\r",
							"//     \"name\",\r",
							"//     \"salary\"\r",
							"//   ]\r",
							"// }\r",
							"\r",
							"// let jsonData = pm.response.json();\r",
							"\r",
							"// pm.test('Schema is valid', function () {\r",
							"//     pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"// });\r",
							"\r",
							"// // 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"// let envName = pm.environment.get(\"name\");\r",
							"// console.log(envName)\r",
							"\r",
							"// let reqData = request.data\r",
							"\r",
							"// pm.test(\"занчение поля name = значению переменной name из окружения\", function () {\r",
							"//     pm.expect(jsonData.name).to.eql(envName);\r",
							"//     pm.expect(reqData.name).to.eql(envName);\r",
							"// });\r",
							"\r",
							"// // 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"// pm.test(\"занчение поля age в ответе соответсвует отправленному в запросе значению поля age\", function () {\r",
							"//     pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"// });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "u_salary_1.5_year",
			"value": ""
		}
	]
}